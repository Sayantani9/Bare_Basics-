//Program 11

//1
//01
//101
//0101
//10101

#include<bits/stdc++.h>
using namespace std;

void pattern(int n) {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= i; j++) {
            if ((i + j) % 2 == 0) {
                cout << "1";
            } else {
                cout << "0";
            }
        }
        cout << endl;
    }
}

int main() {
    int n;
    cout << "Enter the number of rows: ";
    cin >> n;
    pattern(n);
    return 0;
}
// Output:
// Enter the number of rows: 5
// 1
// 01
// 101
// 0101
// 10101
// Time Complexity: O(n^2)
// Space Complexity: O(1)
// The time complexity is O(n^2) because we have two nested loops: the outer
// loop runs n times and the inner loop runs i times, where i varies from 1
// to n. The space complexity is O(1) because we are not using any additional
// data structures that grow with input size; we are only using a constant amount
// of space for variables.
//EXPLANATION:
// The pattern is generated by checking the sum of the row index (i) and column index
// (j). If the sum is even, we print '1'; if it is odd, we print '0'. The outer loop
// iterates through each row, while the inner loop iterates through each column in that row.
// The result is a pattern of alternating '1's and '0's, starting with '1' in the first row.
//EXPLANATION OF CODE:
// 1. We define a function `pattern` that takes an integer `n` as input, which represents the number of rows.
// 2. The outer loop iterates from 1 to `n`, representing each row.
// 3. The inner loop iterates from 1 to `i`, where `i` is the current row number.
// 4. Inside the inner loop, we check if the sum of the current row index `i` and column index `j`
//    is even or odd. If it is even, we print '1'; if it is odd, we print '0'.
// 5. After completing each row, we print a newline character to move to the next line.
// 6. In the `main` function, we prompt the user to enter the number of rows and call the `pattern` function with that input.
// 7. Finally, we return 0 to indicate successful execution of the program.
// The program generates a pattern of alternating '1's and '0's based on the specified
// number of rows, creating a visually appealing output that follows the specified rules.
// The pattern starts with '1' in the first row, and each subsequent row alternates
// between '1's and '0's based on the sum of the row and column indices
// (i + j). The output is printed in a structured format, with each row on
// a new line, creating a triangular pattern of numbers.